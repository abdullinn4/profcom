import {Category} from "../entities";
export const mockCategories: Category[] = [
    {
        id: 1,
        fullName: "Обучающийся, являющийся иногородним",
        shortName: "Иногородний",
        required: ["Копия паспорта (страницы с фото и регистрацией)"],
        optional: []
    },
    {
        id: 2,
        fullName: "Обучающийся, являющийся членом многодетной семьи, в которой воспитываются три и более детей дошкольного возраста и / или обучающихся в средних образовательных, средних специальных и высших учебных заведениях",
        shortName: "Многодетная семья",
        required: [
            "Копии свидетельств о рождении всех детей в семье, включая самого обучающегося"
        ],
        optional: [
            "Оригиналы справок с места учебы детей"
        ]
    },
    {
        id: 3,
        fullName: "Обучающийся из неполной семьи",
        shortName: "Неполная семья",
        required: [
            "Копии свидетельства о рождении обучающегося"
        ],
        optional: [
            "Свидетельства о смерти",
            "Свидетельства о расторжении брака",
            "Справки матери-одиночки",
            "Паспорта единственного родителя (страницы с фото и семейным положением)"
        ]
    },
    {
        id: 4,
        fullName: "Обучающийся, имеющий обоих родителей-пенсионеров, либо одного из родителей – пенсионера",
        shortName: "Родители-пенсионеры",
        required: [
            "Копии свидетельства о рождении обучающегося"
        ],
        optional: [
            "Пенсионные удостоверения родителя / родителей"
        ]
    },
    {
        id: 5,
        fullName: "Обучающиеся, получающие государственную социальную помощь, установленную в субъектах РФ",
        shortName: "Гос. соц. помощь",
        required: [
            "Документ, подтверждающий назначение государственной социальной помощи, выданной органом социальной защиты населения по месту жительства"
        ],
        optional: []
    },
    {
        id: 6,
        fullName: "Обучающийся, относящийся к категории детей-сирот; детей, оставшихся без попечения родителей",
        shortName: "Дети-сироты",
        required: [
            "Копии документов из органов опеки и попечительства, подтверждающих категорию",
            "Копия решения суда о лишении его родителей родительских прав",
            "Копия свидетельства о рождении обучающегося",
            "Копия свидетельства о смерти родителей",
            "Копии документов об установлении опеки (попечительства)",
            "Документы о передаче ребенка-сироты или ребенка, оставшегося без попечения родителей, на воспитание в приемную семью"
        ],
        optional: []
    },
    {
        id: 7,
        fullName: "Обучающийся, относящийся к категории детей-инвалидов, инвалидов I и II групп",
        shortName: "Дети-инвалиды I, II групп",
        required: [
            "Копия справки ВТЭК, МСЭ об инвалидности"
        ],
        optional: []
    },
    {
        id: 8,
        fullName: "Обучающийся в возрасте до 20 лет, имеющий единственного родителя – инвалида I",
        shortName: "Ребенок с инвалидом I группы",
        required: [
            "Копии свидетельства о рождении обучающегося",
            "Справки об инвалидности единственного родителя"
        ],
        optional: [
            "Свидетельства о смерти",
            "Свидетельства о расторжении брака",
            "Справки матери-одиночки",
            "Паспорта единственного родителя (страницы с фото и семейным положением)"
        ]
    },
    {
        id: 9,
        fullName: "Обучающийся, имеющий обоих родителей либо одного из родителей инвалида I, II группы",
        shortName: "Родители-инвалиды I, II групп",
        required: [
            "Копии свидетельства о рождении обучающегося"
        ],
        optional: [
            "Справки ВТЭК, МСЭ об инвалидности родителей/родителя"
        ]
    },
    {
        id: 10,
        fullName: "Обучающийся, являющийся семейным, при этом его супруг (супруга) является обучающимся",
        shortName: "Семейный обучающийся",
        required: [
            "Копия свидетельства о браке"
        ],
        optional: [
            "Оригинал справки с места учебы супруга / супруги"
        ]
    },
    {
        id: 11,
        fullName: "Обучающийся, на иждивении которого есть дети",
        shortName: "Обучающийся с детьми",
        required: [
            "Копия свидетельства о рождении ребенка"
        ],
        optional: []
    },
    {
        id: 12,
        fullName: "Обучающийся, относящийся к категории ветеранов и инвалидов боевых действий",
        shortName: "Ветераны и инвалиды боевых действий",
        required: [
            "Копии справки об инвалидности",
            "Удостоверения ветерана боевых действий"
        ],
        optional: []
    },
    {
        id: 13,
        fullName: "Обучающийся, относящийся к категории лиц, пострадавших в результате аварии на Чернобыльской АЭС и других радиационных катастроф",
        shortName: "Пострадавшие в ЧАЭС и радиационных катастрофах",
        required: [
            "Копия справки (удостоверения), подтверждающей факт лица, пострадавшего вследствие катастрофы на Чернобыльской атомной электростанции и других радиационных катастрофах"
        ],
        optional: []
    },
    {
        id: 14,
        fullName: "Обучающийся, оказавшийся в другой тяжелой жизненной ситуации",
        shortName: "Тяжелая жизненная ситуация",
        required: [
            "Документы, подтверждающие возникновение тяжелой жизненной ситуации (в индивидуальном порядке)"
        ],
        optional: []
    }
];

export const getCategories = async (type: "university" | "profcom"): Promise<Category[]> => {
    const resp = await fetch("profcom/categories");
    return resp.json();

    // Пока бэка нет — возвращаем мок
    //return new Promise((resolve) => setTimeout(() => resolve(mockCategories), 300));
};

export const generateDocument = async (payload: {
    categories: number[];
    documents: string[];
    format: "pdf" | "docx";
}) => {
    const response = await fetch("/profcom/generate-document", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
    });

    if (!response.ok) {
        throw new Error("Ошибка при генерации документа");
    }

    return response.blob();
};


/*
export const submitDocuments = async (payload: {
    categories: number[]
    documents: string[]
}) => {
    const resp = await fetch("api/submit", {
        method: "POST",
        headers: {
            "Content-type": "application/json"
        },
        body: JSON.stringify(payload)
    })
    if (!resp.ok) throw new Error("Ошибка при отправке данных");
    return resp.json();
}*/
